Foundation knowledge for functional programming:
  https://www.youtube.com/watch?v=eis11j_iGMs

At minutes: 4:15 onward

Lambda calculus: only 3 things
It got Variable: x, y or z ,...
It got a way of building function: the lambda notation
And it got a way of applying function


My note: it is very interesting when I heard he said about "apply" <- perhaps that's why javascript, and Scala having function "apply"

Another interesting thing related to how he explained about definition of NOT
  - By "recursively" expanded lambda function "phase-by-phase" until the last phase, he re-applied the lambda-function of TRUE then the aha moment arise to me.

By watching the video, I came to understand that:
	Algebraic Data Types for Typescript
	And "data constructor" for scala Or Haskell
all of these terms refer to the same concept